{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\nconst cors = require('cors');\nconst http = require('http');\nconst socketio = require('socket.io');\nconst path = require('path');\nconst userRoutes = require('./routes/userRoutes');\nconst chatRoutes = require('./routes/chatRoutes');\nconst messageRoutes = require('./routes/messageRoutes');\nconst uploadRoutes = require('./routes/uploadRoutes');\n\n// Load environment variables\ndotenv.config();\n\n// Initialize express app\nconst app = express();\nconst server = http.createServer(app);\n\n// Configure Socket.io with permissive CORS\nconst io = socketio(server, {\n  cors: {\n    origin: \"*\",\n    // Allow all origins\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\"]\n  },\n  pingTimeout: 60000 // Increase timeout to avoid frequent disconnects\n});\n\n// Configure Express middleware\napp.use(cors({\n  origin: \"*\",\n  // Allow all origins\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"]\n}));\napp.use(express.json());\n\n// Serve static files from uploads directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGO_URI).then(() => console.log('MongoDB connected successfully')).catch(err => console.error('MongoDB connection error:', err));\n\n// API Routes\napp.use('/api/users', userRoutes);\napp.use('/api/chat', chatRoutes);\napp.use('/api/messages', messageRoutes);\napp.use('/api/upload', uploadRoutes);\n\n// Health check route\napp.get('/', (req, res) => {\n  res.send('MERN Chat API is running');\n});\n\n// Map to store active user connections\nconst userSocketMap = {};\n\n// Socket.io connection handling\nio.on('connection', socket => {\n  console.log(`New socket connection: ${socket.id}`);\n\n  // Handle user setup\n  socket.on('setup', userData => {\n    if (!userData || !userData._id) {\n      console.log('Invalid user data for socket setup');\n      return;\n    }\n    const userId = userData._id;\n\n    // Store user's socket for later reference\n    userSocketMap[userId] = socket.id;\n\n    // Join a room named after the user ID\n    socket.join(userId);\n\n    // Store userId on socket object for easy reference on disconnect\n    socket.userId = userId;\n\n    // Emit confirmation\n    socket.emit('connected');\n    console.log(`User ${userId} connected with socket ${socket.id}`);\n  });\n\n  // Handle joining a specific chat room\n  socket.on('join chat', roomId => {\n    socket.join(roomId);\n    console.log(`User joined room: ${roomId}`);\n  });\n\n  // Handle typing indicators\n  socket.on('typing', roomId => {\n    socket.to(roomId).emit('typing');\n  });\n  socket.on('stop typing', roomId => {\n    socket.to(roomId).emit('stop typing');\n  });\n\n  // Handle new messages\n  socket.on('new message', messageData => {\n    const chat = messageData.chat;\n    if (!chat || !chat.users) {\n      console.log('Invalid chat data in message:', messageData);\n      return;\n    }\n\n    // Broadcast to all users in the chat except sender\n    chat.users.forEach(user => {\n      if (user._id === messageData.sender._id) return; // Skip sender\n\n      // Send to user's personal room\n      socket.to(user._id).emit('message received', messageData);\n      console.log(`Message sent to user ${user._id}`);\n    });\n  });\n\n  // Handle new chat creation event\n  socket.on('new chat', chatData => {\n    if (!chatData || !chatData.users) {\n      console.log('Invalid chat data:', chatData);\n      return;\n    }\n\n    // Broadcast new chat to all users involved except the creator\n    chatData.users.forEach(user => {\n      if (user._id === socket.userId) return; // Skip creator\n\n      // Send to user's personal room\n      socket.to(user._id).emit('chat created', chatData);\n      console.log(`New chat notification sent to user ${user._id}`);\n    });\n  });\n\n  // Handle group chat creation event\n  socket.on('new group', groupData => {\n    if (!groupData || !groupData.users) {\n      console.log('Invalid group data:', groupData);\n      return;\n    }\n\n    // Broadcast new group to all users involved except the creator\n    groupData.users.forEach(user => {\n      if (user._id === socket.userId) return; // Skip creator\n\n      // Send to user's personal room\n      socket.to(user._id).emit('group created', groupData);\n      console.log(`New group notification sent to user ${user._id}`);\n    });\n  });\n\n  // Handle disconnect\n  socket.on('disconnect', () => {\n    console.log(`Socket disconnected: ${socket.id}`);\n\n    // Clean up user mapping on disconnect\n    if (socket.userId) {\n      delete userSocketMap[socket.userId];\n      console.log(`Removed user ${socket.userId} from socket map`);\n    }\n  });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({\n    message: 'Server error',\n    error: process.env.NODE_ENV === 'production' ? 'An error occurred' : err.message\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","dotenv","cors","http","socketio","path","userRoutes","chatRoutes","messageRoutes","uploadRoutes","config","app","server","createServer","io","origin","methods","allowedHeaders","pingTimeout","use","json","static","join","__dirname","connect","process","env","MONGO_URI","then","console","log","catch","err","error","get","req","res","send","userSocketMap","on","socket","id","userData","_id","userId","emit","roomId","to","messageData","chat","users","forEach","user","sender","chatData","groupData","next","status","message","NODE_ENV","PORT","listen"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/utils/socket.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\nconst cors = require('cors');\nconst http = require('http');\nconst socketio = require('socket.io');\nconst path = require('path');\nconst userRoutes = require('./routes/userRoutes');\nconst chatRoutes = require('./routes/chatRoutes');\nconst messageRoutes = require('./routes/messageRoutes');\nconst uploadRoutes = require('./routes/uploadRoutes');\n\n// Load environment variables\ndotenv.config();\n\n// Initialize express app\nconst app = express();\nconst server = http.createServer(app);\n\n// Configure Socket.io with permissive CORS\nconst io = socketio(server, {\n  cors: {\n    origin: \"*\", // Allow all origins\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\"]\n  },\n  pingTimeout: 60000 // Increase timeout to avoid frequent disconnects\n});\n\n// Configure Express middleware\napp.use(cors({\n  origin: \"*\", // Allow all origins\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"]\n}));\napp.use(express.json());\n\n// Serve static files from uploads directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGO_URI)\n  .then(() => console.log('MongoDB connected successfully'))\n  .catch(err => console.error('MongoDB connection error:', err));\n\n// API Routes\napp.use('/api/users', userRoutes);\napp.use('/api/chat', chatRoutes);\napp.use('/api/messages', messageRoutes);\napp.use('/api/upload', uploadRoutes);\n\n// Health check route\napp.get('/', (req, res) => {\n  res.send('MERN Chat API is running');\n});\n\n// Map to store active user connections\nconst userSocketMap = {};\n\n// Socket.io connection handling\nio.on('connection', (socket) => {\n  console.log(`New socket connection: ${socket.id}`);\n\n  // Handle user setup\n  socket.on('setup', (userData) => {\n    if (!userData || !userData._id) {\n      console.log('Invalid user data for socket setup');\n      return;\n    }\n\n    const userId = userData._id;\n\n    // Store user's socket for later reference\n    userSocketMap[userId] = socket.id;\n    \n    // Join a room named after the user ID\n    socket.join(userId);\n    \n    // Store userId on socket object for easy reference on disconnect\n    socket.userId = userId;\n    \n    // Emit confirmation\n    socket.emit('connected');\n    console.log(`User ${userId} connected with socket ${socket.id}`);\n  });\n\n  // Handle joining a specific chat room\n  socket.on('join chat', (roomId) => {\n    socket.join(roomId);\n    console.log(`User joined room: ${roomId}`);\n  });\n\n  // Handle typing indicators\n  socket.on('typing', (roomId) => {\n    socket.to(roomId).emit('typing');\n  });\n\n  socket.on('stop typing', (roomId) => {\n    socket.to(roomId).emit('stop typing');\n  });\n\n  // Handle new messages\n  socket.on('new message', (messageData) => {\n    const chat = messageData.chat;\n\n    if (!chat || !chat.users) {\n      console.log('Invalid chat data in message:', messageData);\n      return;\n    }\n\n    // Broadcast to all users in the chat except sender\n    chat.users.forEach(user => {\n      if (user._id === messageData.sender._id) return; // Skip sender\n      \n      // Send to user's personal room\n      socket.to(user._id).emit('message received', messageData);\n      console.log(`Message sent to user ${user._id}`);\n    });\n  });\n\n  // Handle new chat creation event\n  socket.on('new chat', (chatData) => {\n    if (!chatData || !chatData.users) {\n      console.log('Invalid chat data:', chatData);\n      return;\n    }\n\n    // Broadcast new chat to all users involved except the creator\n    chatData.users.forEach(user => {\n      if (user._id === socket.userId) return; // Skip creator\n      \n      // Send to user's personal room\n      socket.to(user._id).emit('chat created', chatData);\n      console.log(`New chat notification sent to user ${user._id}`);\n    });\n  });\n\n  // Handle group chat creation event\n  socket.on('new group', (groupData) => {\n    if (!groupData || !groupData.users) {\n      console.log('Invalid group data:', groupData);\n      return;\n    }\n\n    // Broadcast new group to all users involved except the creator\n    groupData.users.forEach(user => {\n      if (user._id === socket.userId) return; // Skip creator\n      \n      // Send to user's personal room\n      socket.to(user._id).emit('group created', groupData);\n      console.log(`New group notification sent to user ${user._id}`);\n    });\n  });\n\n  // Handle disconnect\n  socket.on('disconnect', () => {\n    console.log(`Socket disconnected: ${socket.id}`);\n    \n    // Clean up user mapping on disconnect\n    if (socket.userId) {\n      delete userSocketMap[socket.userId];\n      console.log(`Removed user ${socket.userId} from socket map`);\n    }\n  });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({\n    message: 'Server error',\n    error: process.env.NODE_ENV === 'production' ? 'An error occurred' : err.message\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}