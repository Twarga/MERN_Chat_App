{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatList.js\";\nimport React, { memo } from 'react';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport './ChatList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatList = ({\n  chats,\n  selectedChat,\n  handleChatSelect,\n  notifications\n}) => {\n  // Function to get the other user in a 1-on-1 chat\n  const getSenderDetails = (chat, loggedUserId) => {\n    return chat.users.find(user => user._id !== loggedUserId);\n  };\n\n  // Function to get chat name for display\n  const getChatName = (chat, loggedUserId) => {\n    if (chat.isGroupChat) {\n      return chat.chatName;\n    }\n    const sender = getSenderDetails(chat, loggedUserId);\n    return (sender === null || sender === void 0 ? void 0 : sender.username) || \"Unknown User\";\n  };\n\n  // Function to get the latest message\n  const getLatestMessage = chat => {\n    if (chat.latestMessage) {\n      // Check if it's an image message\n      if (chat.latestMessage.content.startsWith('![Image]')) {\n        return 'ðŸ“· Image';\n      }\n      return chat.latestMessage.content.length > 20 ? chat.latestMessage.content.substring(0, 20) + '...' : chat.latestMessage.content;\n    }\n    return \"No messages yet\";\n  };\n\n  // Check if chat has unread notifications\n  const hasNotification = chatId => {\n    return notifications.some(n => n.chat._id === chatId);\n  };\n\n  // Function to format time\n  const formatTime = date => {\n    if (!date) return '';\n    const today = new Date();\n    const messageDate = new Date(date);\n\n    // If same day, show time\n    if (today.toDateString() === messageDate.toDateString()) {\n      return messageDate.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n\n    // If within the last week, show day name\n    const diffDays = Math.floor((today - messageDate) / (1000 * 60 * 60 * 24));\n    if (diffDays < 7) {\n      return messageDate.toLocaleDateString([], {\n        weekday: 'short'\n      });\n    }\n\n    // Otherwise show date\n    return messageDate.toLocaleDateString([], {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  if (chats.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No chats yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Search for users to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), chats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-item ${(selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat._id) === chat._id ? 'selected' : ''} ${hasNotification(chat._id) ? 'has-notification' : ''}`,\n      onClick: () => handleChatSelect(chat),\n      children: [chat.isGroupChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-avatar group-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(UserAvatar, {\n        user: getSenderDetails(chat, localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo'))._id : '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: getChatName(chat, localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo'))._id : '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-last-message\",\n          children: getLatestMessage(chat)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), chat.latestMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-time\",\n        children: formatTime(chat.latestMessage.createdAt)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), hasNotification(chat._id) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, chat._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_c = ChatList;\nexport default _c2 = /*#__PURE__*/memo(ChatList);\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","UserAvatar","jsxDEV","_jsxDEV","ChatList","chats","selectedChat","handleChatSelect","notifications","getSenderDetails","chat","loggedUserId","users","find","user","_id","getChatName","isGroupChat","chatName","sender","username","getLatestMessage","latestMessage","content","startsWith","length","substring","hasNotification","chatId","some","n","formatTime","date","today","Date","messageDate","toDateString","toLocaleTimeString","hour","minute","diffDays","Math","floor","toLocaleDateString","weekday","month","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","localStorage","getItem","JSON","parse","createdAt","_c","_c2","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatList.js"],"sourcesContent":["import React, { memo } from 'react';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport './ChatList.css';\n\nconst ChatList = ({ chats, selectedChat, handleChatSelect, notifications }) => {\n  // Function to get the other user in a 1-on-1 chat\n  const getSenderDetails = (chat, loggedUserId) => {\n    return chat.users.find(user => user._id !== loggedUserId);\n  };\n\n  // Function to get chat name for display\n  const getChatName = (chat, loggedUserId) => {\n    if (chat.isGroupChat) {\n      return chat.chatName;\n    }\n    const sender = getSenderDetails(chat, loggedUserId);\n    return sender?.username || \"Unknown User\";\n  };\n\n  // Function to get the latest message\n  const getLatestMessage = (chat) => {\n    if (chat.latestMessage) {\n      // Check if it's an image message\n      if (chat.latestMessage.content.startsWith('![Image]')) {\n        return 'ðŸ“· Image';\n      }\n      return chat.latestMessage.content.length > 20\n        ? chat.latestMessage.content.substring(0, 20) + '...'\n        : chat.latestMessage.content;\n    }\n    return \"No messages yet\";\n  };\n\n  // Check if chat has unread notifications\n  const hasNotification = (chatId) => {\n    return notifications.some(n => n.chat._id === chatId);\n  };\n\n  // Function to format time\n  const formatTime = (date) => {\n    if (!date) return '';\n    \n    const today = new Date();\n    const messageDate = new Date(date);\n    \n    // If same day, show time\n    if (today.toDateString() === messageDate.toDateString()) {\n      return messageDate.toLocaleTimeString([], { \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n    }\n    \n    // If within the last week, show day name\n    const diffDays = Math.floor((today - messageDate) / (1000 * 60 * 60 * 24));\n    if (diffDays < 7) {\n      return messageDate.toLocaleDateString([], { weekday: 'short' });\n    }\n    \n    // Otherwise show date\n    return messageDate.toLocaleDateString([], {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (chats.length === 0) {\n    return (\n      <div className=\"chat-list\">\n        <h2>Chats</h2>\n        <div className=\"no-chats\">\n          <p>No chats yet</p>\n          <p>Search for users to start chatting</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-list\">\n      <h2>Chats</h2>\n      {chats.map(chat => (\n        <div\n          key={chat._id}\n          className={`chat-item ${selectedChat?._id === chat._id ? 'selected' : ''} ${hasNotification(chat._id) ? 'has-notification' : ''}`}\n          onClick={() => handleChatSelect(chat)}\n        >\n          {chat.isGroupChat ? (\n            <div className=\"chat-avatar group-avatar\">\n              <span>G</span>\n            </div>\n          ) : (\n            <UserAvatar\n              user={getSenderDetails(chat, localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo'))._id : '')}\n            />\n          )}\n          \n          <div className=\"chat-details\">\n            <div className=\"chat-title\">\n              {getChatName(\n                chat,\n                localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo'))._id : ''\n              )}\n            </div>\n            <div className=\"chat-last-message\">\n              {getLatestMessage(chat)}\n            </div>\n          </div>\n          \n          {chat.latestMessage && (\n            <div className=\"chat-time\">\n              {formatTime(chat.latestMessage.createdAt)}\n            </div>\n          )}\n          \n          {hasNotification(chat._id) && (\n            <div className=\"notification-dot\"></div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(ChatList);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}