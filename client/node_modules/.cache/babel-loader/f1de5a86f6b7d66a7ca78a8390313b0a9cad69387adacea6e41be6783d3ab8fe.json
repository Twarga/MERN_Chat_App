{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Message from '../Message/Message';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport Spinner from '../Spinner/Spinner';\nimport { useAuth } from '../../hooks/useAuth';\nimport socket from '../../utils/socket';\nimport './ChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  chat\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Fetch messages when chat changes\n  useEffect(() => {\n    if (chat) {\n      fetchMessages();\n      socket.emit('join chat', chat._id);\n    }\n    return () => {\n      // Clean up typing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [chat]);\n\n  // Set up socket listeners\n  useEffect(() => {\n    socket.on('message received', newMessageReceived => {\n      if (!chat ||\n      // if chat is not selected or doesn't match current chat\n      chat._id !== newMessageReceived.chat._id) {\n        // Add notification logic here\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n    return () => {\n      socket.off('message received');\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, chat, messages]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const fetchMessages = async () => {\n    if (!chat) return;\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/messages/${chat._id}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch messages');\n      }\n      setMessages(data);\n      setLoading(false);\n\n      // Join socket room\n      socket.emit('join chat', chat._id);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n\n    // Typing indicator logic\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', chat._id);\n    }\n    // Continue ChatBox.js from where we left off\n    // Clear timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Stop typing after 3 seconds of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      socket.emit('stop typing', chat._id);\n      setTyping(false);\n    }, 3000);\n  };\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (newMessage.trim() === '') return;\n    socket.emit('stop typing', chat._id);\n    try {\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.token}`\n        },\n        body: JSON.stringify({\n          content: newMessage,\n          chatId: chat._id\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send message');\n      }\n      setNewMessage('');\n      socket.emit('new message', data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  // Get chat name for display\n  const getChatName = () => {\n    var _chat$users$find;\n    if (chat.isGroupChat) {\n      return chat.chatName;\n    }\n    return ((_chat$users$find = chat.users.find(u => u._id !== user._id)) === null || _chat$users$find === void 0 ? void 0 : _chat$users$find.username) || \"Chat\";\n  };\n\n  // Get status text (online/offline)\n  const getStatusText = () => {\n    if (chat.isGroupChat) {\n      return `${chat.users.length} members`;\n    }\n    const chatUser = chat.users.find(u => u._id !== user._id);\n    return chatUser !== null && chatUser !== void 0 && chatUser.isOnline ? 'Online' : 'Offline';\n  };\n  if (!chat) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box chat-box-empty\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a chat to start messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [chat.isGroupChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar group-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(UserAvatar, {\n        user: chat.users.find(u => u._id !== user._id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: getChatName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-text\",\n          children: getStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          isSender: message.sender._id === user._id\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-input-container\",\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: newMessage,\n        onChange: typingHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-paper-plane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 7\n  }, this);\n};\n_s(ChatBox, \"r+YnbCNPN2owR960PI/hKq2XTzY=\", false, function () {\n  return [useAuth];\n});\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Message","UserAvatar","Spinner","useAuth","socket","jsxDEV","_jsxDEV","ChatBox","chat","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","typing","setTyping","isTyping","setIsTyping","user","messagesEndRef","typingTimeoutRef","fetchMessages","emit","_id","current","clearTimeout","on","newMessageReceived","off","scrollToBottom","_messagesEndRef$curre","scrollIntoView","behavior","response","fetch","method","headers","Authorization","token","data","json","ok","Error","message","error","console","typingHandler","e","target","value","setTimeout","sendMessage","preventDefault","trim","body","JSON","stringify","content","chatId","getChatName","_chat$users$find","isGroupChat","chatName","users","find","u","username","getStatusText","length","chatUser","isOnline","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isSender","sender","ref","onSubmit","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Message from '../Message/Message';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport Spinner from '../Spinner/Spinner';\nimport { useAuth } from '../../hooks/useAuth';\nimport socket from '../../utils/socket';\nimport './ChatBox.css';\n\nconst ChatBox = ({ chat }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const { user } = useAuth();\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Fetch messages when chat changes\n  useEffect(() => {\n    if (chat) {\n      fetchMessages();\n      socket.emit('join chat', chat._id);\n    }\n    return () => {\n      // Clean up typing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [chat]);\n\n  // Set up socket listeners\n  useEffect(() => {\n    socket.on('message received', (newMessageReceived) => {\n      if (\n        !chat || // if chat is not selected or doesn't match current chat\n        chat._id !== newMessageReceived.chat._id\n      ) {\n        // Add notification logic here\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n\n    return () => {\n      socket.off('message received');\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, chat, messages]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const fetchMessages = async () => {\n    if (!chat) return;\n\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/messages/${chat._id}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch messages');\n      }\n\n      setMessages(data);\n      setLoading(false);\n\n      // Join socket room\n      socket.emit('join chat', chat._id);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    // Typing indicator logic\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', chat._id);\n    }\n// Continue ChatBox.js from where we left off\n    // Clear timeout\n    if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n  \n      // Stop typing after 3 seconds of inactivity\n      typingTimeoutRef.current = setTimeout(() => {\n        socket.emit('stop typing', chat._id);\n        setTyping(false);\n      }, 3000);\n    };\n  \n    const sendMessage = async (e) => {\n      e.preventDefault();\n      \n      if (newMessage.trim() === '') return;\n      \n      socket.emit('stop typing', chat._id);\n      \n      try {\n        const response = await fetch('/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${user.token}`,\n          },\n          body: JSON.stringify({\n            content: newMessage,\n            chatId: chat._id,\n          }),\n        });\n  \n        const data = await response.json();\n  \n        if (!response.ok) {\n          throw new Error(data.message || 'Failed to send message');\n        }\n  \n        setNewMessage('');\n        socket.emit('new message', data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    };\n  \n    // Get chat name for display\n    const getChatName = () => {\n      if (chat.isGroupChat) {\n        return chat.chatName;\n      }\n      \n      return chat.users.find(u => u._id !== user._id)?.username || \"Chat\";\n    };\n  \n    // Get status text (online/offline)\n    const getStatusText = () => {\n      if (chat.isGroupChat) {\n        return `${chat.users.length} members`;\n      }\n      \n      const chatUser = chat.users.find(u => u._id !== user._id);\n      return chatUser?.isOnline ? 'Online' : 'Offline';\n    };\n  \n    if (!chat) {\n      return (\n        <div className=\"chat-box chat-box-empty\">\n          <div>\n            <h3>Select a chat to start messaging</h3>\n          </div>\n        </div>\n      );\n    }\n  \n    return (\n      <div className=\"chat-box\">\n        <div className=\"chat-header\">\n          {chat.isGroupChat ? (\n            <div className=\"avatar group-avatar\">\n              <span>G</span>\n            </div>\n          ) : (\n            <UserAvatar\n              user={chat.users.find(u => u._id !== user._id)}\n            />\n          )}\n          \n          <div className=\"chat-info\">\n            <h3>{getChatName()}</h3>\n            <p className=\"status-text\">{getStatusText()}</p>\n          </div>\n        </div>\n  \n        <div className=\"messages-container\">\n          {loading ? (\n            <Spinner />\n          ) : (\n            <div className=\"messages\">\n              {messages.map((message) => (\n                <Message\n                  key={message._id}\n                  message={message}\n                  isSender={message.sender._id === user._id}\n                />\n              ))}\n              <div ref={messagesEndRef} />\n              \n              {isTyping && (\n                <div className=\"typing-indicator\">\n                  <div className=\"dot\"></div>\n                  <div className=\"dot\"></div>\n                  <div className=\"dot\"></div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n  \n        <form className=\"message-input-container\" onSubmit={sendMessage}>\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={newMessage}\n            onChange={typingHandler}\n          />\n          <button type=\"submit\">\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </form>\n      </div>\n    );\n  };\n  \n  export default ChatBox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}