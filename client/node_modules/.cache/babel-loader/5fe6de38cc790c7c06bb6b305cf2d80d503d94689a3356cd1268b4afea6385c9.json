{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Message/Message.js\";\nimport React from 'react';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport './Message.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  message,\n  isSender = false\n}) => {\n  var _message$sender;\n  // Check if message contains an image\n  const isImageMessage = message.content && message.content.startsWith('![Image]');\n\n  // Extract image URL if it's an image message\n  const getImageUrl = () => {\n    if (!isImageMessage) return null;\n    const regex = /!\\[Image]\\((.*?)\\)/;\n    const match = message.content.match(regex);\n    return match ? match[1] : null;\n  };\n\n  // Format time for display\n  const formatTime = timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${isSender ? 'message-sender' : 'message-receiver'}`,\n    children: [!isSender && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-avatar\",\n      children: /*#__PURE__*/_jsxDEV(UserAvatar, {\n        user: message.sender,\n        size: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-content ${isImageMessage ? 'message-image' : ''}`,\n      children: [!isSender && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-sender-name\",\n        children: ((_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.username) || 'User'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), isImageMessage ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: getImageUrl(),\n        alt: \"Shared\",\n        className: \"message-img\",\n        onError: e => {\n          e.target.onerror = null;\n          e.target.src = 'https://via.placeholder.com/200?text=Image+Not+Found';\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-text\",\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-time\",\n        children: formatTime(message.createdAt)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","UserAvatar","jsxDEV","_jsxDEV","Message","message","isSender","_message$sender","isImageMessage","content","startsWith","getImageUrl","regex","match","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","className","children","user","sender","size","fileName","_jsxFileName","lineNumber","columnNumber","username","src","alt","onError","e","target","onerror","createdAt","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Message/Message.js"],"sourcesContent":["import React from 'react';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport './Message.css';\n\nconst Message = ({ message, isSender = false }) => {\n  // Check if message contains an image\n  const isImageMessage = message.content && message.content.startsWith('![Image]');\n  \n  // Extract image URL if it's an image message\n  const getImageUrl = () => {\n    if (!isImageMessage) return null;\n    \n    const regex = /!\\[Image]\\((.*?)\\)/;\n    const match = message.content.match(regex);\n    return match ? match[1] : null;\n  };\n  \n  // Format time for display\n  const formatTime = (timestamp) => {\n    if (!timestamp) return '';\n    \n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  return (\n    <div className={`message ${isSender ? 'message-sender' : 'message-receiver'}`}>\n      {!isSender && (\n        <div className=\"message-avatar\">\n          <UserAvatar user={message.sender} size=\"sm\" />\n        </div>\n      )}\n      \n      <div className={`message-content ${isImageMessage ? 'message-image' : ''}`}>\n        {!isSender && (\n          <div className=\"message-sender-name\">{message.sender?.username || 'User'}</div>\n        )}\n        \n        {isImageMessage ? (\n          <img \n            src={getImageUrl()} \n            alt=\"Shared\" \n            className=\"message-img\" \n            onError={(e) => {\n              e.target.onerror = null;\n              e.target.src = 'https://via.placeholder.com/200?text=Image+Not+Found';\n            }}\n          />\n        ) : (\n          <div className=\"message-text\">{message.content}</div>\n        )}\n        \n        <div className=\"message-time\">\n          {formatTime(message.createdAt)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}