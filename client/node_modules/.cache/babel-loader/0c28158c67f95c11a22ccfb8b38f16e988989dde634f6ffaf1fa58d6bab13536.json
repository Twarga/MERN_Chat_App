{"ast":null,"code":"/**\n * API utility for making fetch requests with proper error handling\n */\n\n// Base URL for API requests\nconst BASE_URL = 'http://localhost:5000';\n\n/**\n * Makes a fetch request with proper error handling and authentication\n * @param {string} endpoint - API endpoint (without base URL)\n * @param {Object} options - Fetch options\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const fetchApi = async (endpoint, options = {}, token = null) => {\n  try {\n    // Prepare headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n\n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Prepare fetch options\n    const fetchOptions = {\n      ...options,\n      headers,\n      credentials: 'include',\n      // Include cookies\n      mode: 'cors'\n    };\n\n    // Make request\n    const response = await fetch(`${BASE_URL}${endpoint}`, fetchOptions);\n\n    // Parse response as JSON\n    const data = await response.json().catch(() => ({}));\n\n    // Check if response is ok\n    if (!response.ok) {\n      // Throw error with message from API or default message\n      throw new Error(data.message || `Request failed with status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error.message);\n    throw error;\n  }\n};\n\n/**\n * Get data from API\n * @param {string} endpoint - API endpoint\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const get = (endpoint, token) => {\n  return fetchApi(endpoint, {\n    method: 'GET'\n  }, token);\n};\n\n/**\n * Post data to API\n * @param {string} endpoint - API endpoint\n * @param {Object} data - Request body data\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const post = (endpoint, data, token) => {\n  return fetchApi(endpoint, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  }, token);\n};\n\n/**\n * Update data via API\n * @param {string} endpoint - API endpoint\n * @param {Object} data - Request body data\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const put = (endpoint, data, token) => {\n  return fetchApi(endpoint, {\n    method: 'PUT',\n    body: JSON.stringify(data)\n  }, token);\n};\n\n/**\n * Delete data via API\n * @param {string} endpoint - API endpoint\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const del = (endpoint, token) => {\n  return fetchApi(endpoint, {\n    method: 'DELETE'\n  }, token);\n};","map":{"version":3,"names":["BASE_URL","fetchApi","endpoint","options","token","headers","fetchOptions","credentials","mode","response","fetch","data","json","catch","ok","Error","message","status","error","console","get","method","post","body","JSON","stringify","put","del"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/utils/api.js"],"sourcesContent":["/**\n * API utility for making fetch requests with proper error handling\n */\n\n// Base URL for API requests\nconst BASE_URL = 'http://localhost:5000';\n\n/**\n * Makes a fetch request with proper error handling and authentication\n * @param {string} endpoint - API endpoint (without base URL)\n * @param {Object} options - Fetch options\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const fetchApi = async (endpoint, options = {}, token = null) => {\n  try {\n    // Prepare headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n    \n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Prepare fetch options\n    const fetchOptions = {\n      ...options,\n      headers,\n      credentials: 'include', // Include cookies\n      mode: 'cors',\n    };\n\n    // Make request\n    const response = await fetch(`${BASE_URL}${endpoint}`, fetchOptions);\n    \n    // Parse response as JSON\n    const data = await response.json().catch(() => ({}));\n    \n    // Check if response is ok\n    if (!response.ok) {\n      // Throw error with message from API or default message\n      throw new Error(data.message || `Request failed with status: ${response.status}`);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error.message);\n    throw error;\n  }\n};\n\n/**\n * Get data from API\n * @param {string} endpoint - API endpoint\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const get = (endpoint, token) => {\n  return fetchApi(endpoint, { method: 'GET' }, token);\n};\n\n/**\n * Post data to API\n * @param {string} endpoint - API endpoint\n * @param {Object} data - Request body data\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const post = (endpoint, data, token) => {\n  return fetchApi(\n    endpoint,\n    {\n      method: 'POST',\n      body: JSON.stringify(data),\n    },\n    token\n  );\n};\n\n/**\n * Update data via API\n * @param {string} endpoint - API endpoint\n * @param {Object} data - Request body data\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const put = (endpoint, data, token) => {\n  return fetchApi(\n    endpoint,\n    {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    },\n    token\n  );\n};\n\n/**\n * Delete data via API\n * @param {string} endpoint - API endpoint\n * @param {string} token - JWT auth token\n * @returns {Promise<any>} Response data\n */\nexport const del = (endpoint, token) => {\n  return fetchApi(endpoint, { method: 'DELETE' }, token);\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,GAAG,IAAI,KAAK;EACtE,IAAI;IACF;IACA,MAAMC,OAAO,GAAG;MACd,cAAc,EAAE,kBAAkB;MAClC,GAAGF,OAAO,CAACE;IACb,CAAC;;IAED;IACA,IAAID,KAAK,EAAE;MACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;IAC9C;;IAEA;IACA,MAAME,YAAY,GAAG;MACnB,GAAGH,OAAO;MACVE,OAAO;MACPE,WAAW,EAAE,SAAS;MAAE;MACxBC,IAAI,EAAE;IACR,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,GAAGE,QAAQ,EAAE,EAAEI,YAAY,CAAC;;IAEpE;IACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEpD;IACA,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAACJ,IAAI,CAACK,OAAO,IAAI,+BAA+BP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IACnF;IAEA,OAAON,IAAI;EACb,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAchB,QAAQ,IAAI,EAAEgB,KAAK,CAACF,OAAO,CAAC;IACxD,MAAME,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,GAAG,GAAGA,CAAClB,QAAQ,EAAEE,KAAK,KAAK;EACtC,OAAOH,QAAQ,CAACC,QAAQ,EAAE;IAAEmB,MAAM,EAAE;EAAM,CAAC,EAAEjB,KAAK,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,IAAI,GAAGA,CAACpB,QAAQ,EAAES,IAAI,EAAEP,KAAK,KAAK;EAC7C,OAAOH,QAAQ,CACbC,QAAQ,EACR;IACEmB,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,IAAI;EAC3B,CAAC,EACDP,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsB,GAAG,GAAGA,CAACxB,QAAQ,EAAES,IAAI,EAAEP,KAAK,KAAK;EAC5C,OAAOH,QAAQ,CACbC,QAAQ,EACR;IACEmB,MAAM,EAAE,KAAK;IACbE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,IAAI;EAC3B,CAAC,EACDP,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuB,GAAG,GAAGA,CAACzB,QAAQ,EAAEE,KAAK,KAAK;EACtC,OAAOH,QAAQ,CAACC,QAAQ,EAAE;IAAEmB,MAAM,EAAE;EAAS,CAAC,EAAEjB,KAAK,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}