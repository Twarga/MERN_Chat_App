{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport * as api from '../utils/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null\n};\n\n// Create context\nexport const ChatContext = /*#__PURE__*/createContext(initialState);\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SELECTED_CHAT':\n      return {\n        ...state,\n        selectedChat: action.payload\n      };\n    case 'SET_CHATS':\n      return {\n        ...state,\n        chats: action.payload\n      };\n    case 'ADD_CHAT':\n      return {\n        ...state,\n        chats: [action.payload, ...state.chats]\n      };\n    case 'UPDATE_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map(c => c._id === action.payload._id ? action.payload : c)\n      };\n    case 'SET_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: action.payload\n      };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications]\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.chat._id !== action.payload)\n      };\n    case 'CHAT_LOADING':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'CHAT_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'CHAT_RESET':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Actions\n  const setSelectedChat = chat => {\n    dispatch({\n      type: 'SET_SELECTED_CHAT',\n      payload: chat\n    });\n  };\n  const fetchChats = async token => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.get('/api/chat', token);\n      dispatch({\n        type: 'SET_CHATS',\n        payload: data\n      });\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const accessChat = async (userId, token) => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.post('/api/chat', {\n        userId\n      }, token);\n\n      // If the chat is not already in the list, add it\n      if (!state.chats.find(c => c._id === data._id)) {\n        dispatch({\n          type: 'ADD_CHAT',\n          payload: data\n        });\n      }\n      setSelectedChat(data);\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const createGroupChat = async (users, name, token) => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.post('/api/chat/group', {\n        users: JSON.stringify(users),\n        name\n      }, token);\n      dispatch({\n        type: 'ADD_CHAT',\n        payload: data\n      });\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const renameGroup = async (chatId, chatName, token) => {\n    try {\n      var _state$selectedChat;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.put('/api/chat/rename', {\n        chatId,\n        chatName\n      }, token);\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat = state.selectedChat) === null || _state$selectedChat === void 0 ? void 0 : _state$selectedChat._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const addToGroup = async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat2;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.put('/api/chat/groupadd', {\n        chatId,\n        userId\n      }, token);\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat2 = state.selectedChat) === null || _state$selectedChat2 === void 0 ? void 0 : _state$selectedChat2._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const removeFromGroup = async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat3;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const data = await api.put('/api/chat/groupremove', {\n        chatId,\n        userId\n      }, token);\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat3 = state.selectedChat) === null || _state$selectedChat3 === void 0 ? void 0 : _state$selectedChat3._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: notification\n    });\n  };\n  const removeNotification = chatId => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      payload: chatId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      selectedChat: state.selectedChat,\n      chats: state.chats,\n      notifications: state.notifications,\n      loading: state.loading,\n      error: state.error,\n      setSelectedChat,\n      fetchChats,\n      accessChat,\n      createGroupChat,\n      renameGroup,\n      addToGroup,\n      removeFromGroup,\n      addNotification,\n      removeNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useReducer","api","jsxDEV","_jsxDEV","initialState","selectedChat","chats","notifications","loading","error","ChatContext","chatReducer","state","action","type","payload","map","c","_id","filter","n","chat","ChatProvider","children","_s","dispatch","setSelectedChat","fetchChats","token","data","get","message","accessChat","userId","post","find","createGroupChat","users","name","JSON","stringify","renameGroup","chatId","chatName","_state$selectedChat","put","addToGroup","_state$selectedChat2","removeFromGroup","_state$selectedChat3","addNotification","notification","removeNotification","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport * as api from '../utils/api';\n\n// Initial state\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null,\n};\n\n// Create context\nexport const ChatContext = createContext(initialState);\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SELECTED_CHAT':\n      return { ...state, selectedChat: action.payload };\n    case 'SET_CHATS':\n      return { ...state, chats: action.payload };\n    case 'ADD_CHAT':\n      return { ...state, chats: [action.payload, ...state.chats] };\n    case 'UPDATE_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map((c) =>\n          c._id === action.payload._id ? action.payload : c\n        ),\n      };\n    case 'SET_NOTIFICATIONS':\n      return { ...state, notifications: action.payload };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          (n) => n.chat._id !== action.payload\n        ),\n      };\n    case 'CHAT_LOADING':\n      return { ...state, loading: true };\n    case 'CHAT_ERROR':\n      return { ...state, loading: false, error: action.payload };\n    case 'CHAT_RESET':\n      return { ...state, loading: false, error: null };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Actions\n  const setSelectedChat = (chat) => {\n    dispatch({ type: 'SET_SELECTED_CHAT', payload: chat });\n  };\n\n  const fetchChats = async (token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.get('/api/chat', token);\n      \n      dispatch({ type: 'SET_CHATS', payload: data });\n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const accessChat = async (userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.post('/api/chat', { userId }, token);\n      \n      // If the chat is not already in the list, add it\n      if (!state.chats.find((c) => c._id === data._id)) {\n        dispatch({ type: 'ADD_CHAT', payload: data });\n      }\n\n      setSelectedChat(data);\n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const createGroupChat = async (users, name, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.post(\n        '/api/chat/group', \n        { users: JSON.stringify(users), name },\n        token\n      );\n      \n      dispatch({ type: 'ADD_CHAT', payload: data });\n      dispatch({ type: 'CHAT_RESET' });\n      return data;\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const renameGroup = async (chatId, chatName, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.put(\n        '/api/chat/rename',\n        { chatId, chatName },\n        token\n      );\n      \n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const addToGroup = async (chatId, userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.put(\n        '/api/chat/groupadd',\n        { chatId, userId },\n        token\n      );\n      \n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const removeFromGroup = async (chatId, userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      \n      const data = await api.put(\n        '/api/chat/groupremove',\n        { chatId, userId },\n        token\n      );\n      \n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const addNotification = (notification) => {\n    dispatch({ type: 'ADD_NOTIFICATION', payload: notification });\n  };\n\n  const removeNotification = (chatId) => {\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: chatId });\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat: state.selectedChat,\n        chats: state.chats,\n        notifications: state.notifications,\n        loading: state.loading,\n        error: state.error,\n        setSelectedChat,\n        fetchChats,\n        accessChat,\n        createGroupChat,\n        renameGroup,\n        addToGroup,\n        removeFromGroup,\n        addNotification,\n        removeNotification,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAO,KAAKC,GAAG,MAAM,cAAc;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,IAAI;EAClBC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE,EAAE;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAACK,YAAY,CAAC;;AAEtD;AACA,MAAMO,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGF,KAAK;QAAEP,YAAY,EAAEQ,MAAM,CAACE;MAAQ,CAAC;IACnD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGH,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACE;MAAQ,CAAC;IAC5C,KAAK,UAAU;MACb,OAAO;QAAE,GAAGH,KAAK;QAAEN,KAAK,EAAE,CAACO,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACN,KAAK;MAAE,CAAC;IAC9D,KAAK,aAAa;MAChB,OAAO;QACL,GAAGM,KAAK;QACRN,KAAK,EAAEM,KAAK,CAACN,KAAK,CAACU,GAAG,CAAEC,CAAC,IACvBA,CAAC,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO,CAACG,GAAG,GAAGL,MAAM,CAACE,OAAO,GAAGE,CAClD;MACF,CAAC;IACH,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGL,KAAK;QAAEL,aAAa,EAAEM,MAAM,CAACE;MAAQ,CAAC;IACpD,KAAK,kBAAkB;MACrB,OAAO;QACL,GAAGH,KAAK;QACRL,aAAa,EAAE,CAACM,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACL,aAAa;MACxD,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGK,KAAK;QACRL,aAAa,EAAEK,KAAK,CAACL,aAAa,CAACY,MAAM,CACtCC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAACH,GAAG,KAAKL,MAAM,CAACE,OAC/B;MACF,CAAC;IACH,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGH,KAAK;QAAEJ,OAAO,EAAE;MAAK,CAAC;IACpC,KAAK,YAAY;MACf,OAAO;QAAE,GAAGI,KAAK;QAAEJ,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEI,MAAM,CAACE;MAAQ,CAAC;IAC5D,KAAK,YAAY;MACf,OAAO;QAAE,GAAGH,KAAK;QAAEJ,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC;IAClD;MACE,OAAOG,KAAK;EAChB;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACZ,KAAK,EAAEa,QAAQ,CAAC,GAAGzB,UAAU,CAACW,WAAW,EAAEP,YAAY,CAAC;;EAE/D;EACA,MAAMsB,eAAe,GAAIL,IAAI,IAAK;IAChCI,QAAQ,CAAC;MAAEX,IAAI,EAAE,mBAAmB;MAAEC,OAAO,EAAEM;IAAK,CAAC,CAAC;EACxD,CAAC;EAED,MAAMM,UAAU,GAAG,MAAOC,KAAK,IAAK;IAClC,IAAI;MACFH,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAAC6B,GAAG,CAAC,WAAW,EAAEF,KAAK,CAAC;MAE9CH,QAAQ,CAAC;QAAEX,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEc;MAAK,CAAC,CAAC;MAC9CJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEL,KAAK,KAAK;IAC1C,IAAI;MACFH,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAACiC,IAAI,CAAC,WAAW,EAAE;QAAED;MAAO,CAAC,EAAEL,KAAK,CAAC;;MAE3D;MACA,IAAI,CAAChB,KAAK,CAACN,KAAK,CAAC6B,IAAI,CAAElB,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKW,IAAI,CAACX,GAAG,CAAC,EAAE;QAChDO,QAAQ,CAAC;UAAEX,IAAI,EAAE,UAAU;UAAEC,OAAO,EAAEc;QAAK,CAAC,CAAC;MAC/C;MAEAH,eAAe,CAACG,IAAI,CAAC;MACrBJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMK,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,EAAEV,KAAK,KAAK;IACpD,IAAI;MACFH,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAACiC,IAAI,CACzB,iBAAiB,EACjB;QAAEG,KAAK,EAAEE,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;QAAEC;MAAK,CAAC,EACtCV,KACF,CAAC;MAEDH,QAAQ,CAAC;QAAEX,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAEc;MAAK,CAAC,CAAC;MAC7CJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;MAChC,OAAOe,IAAI;IACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;MACxD,MAAMtB,KAAK;IACb;EACF,CAAC;EAED,MAAMgC,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,EAAEf,KAAK,KAAK;IACrD,IAAI;MAAA,IAAAgB,mBAAA;MACFnB,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAAC4C,GAAG,CACxB,kBAAkB,EAClB;QAAEH,MAAM;QAAEC;MAAS,CAAC,EACpBf,KACF,CAAC;MAEDH,QAAQ,CAAC;QAAEX,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEc;MAAK,CAAC,CAAC;;MAEhD;MACA,IAAI,EAAAe,mBAAA,GAAAhC,KAAK,CAACP,YAAY,cAAAuC,mBAAA,uBAAlBA,mBAAA,CAAoB1B,GAAG,MAAKW,IAAI,CAACX,GAAG,EAAE;QACxCQ,eAAe,CAACG,IAAI,CAAC;MACvB;MAEAJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMe,UAAU,GAAG,MAAAA,CAAOJ,MAAM,EAAET,MAAM,EAAEL,KAAK,KAAK;IAClD,IAAI;MAAA,IAAAmB,oBAAA;MACFtB,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAAC4C,GAAG,CACxB,oBAAoB,EACpB;QAAEH,MAAM;QAAET;MAAO,CAAC,EAClBL,KACF,CAAC;MAEDH,QAAQ,CAAC;QAAEX,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEc;MAAK,CAAC,CAAC;;MAEhD;MACA,IAAI,EAAAkB,oBAAA,GAAAnC,KAAK,CAACP,YAAY,cAAA0C,oBAAA,uBAAlBA,oBAAA,CAAoB7B,GAAG,MAAKW,IAAI,CAACX,GAAG,EAAE;QACxCQ,eAAe,CAACG,IAAI,CAAC;MACvB;MAEAJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMiB,eAAe,GAAG,MAAAA,CAAON,MAAM,EAAET,MAAM,EAAEL,KAAK,KAAK;IACvD,IAAI;MAAA,IAAAqB,oBAAA;MACFxB,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAe,CAAC,CAAC;MAElC,MAAMe,IAAI,GAAG,MAAM5B,GAAG,CAAC4C,GAAG,CACxB,uBAAuB,EACvB;QAAEH,MAAM;QAAET;MAAO,CAAC,EAClBL,KACF,CAAC;MAEDH,QAAQ,CAAC;QAAEX,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEc;MAAK,CAAC,CAAC;;MAEhD;MACA,IAAI,EAAAoB,oBAAA,GAAArC,KAAK,CAACP,YAAY,cAAA4C,oBAAA,uBAAlBA,oBAAA,CAAoB/B,GAAG,MAAKW,IAAI,CAACX,GAAG,EAAE;QACxCQ,eAAe,CAACG,IAAI,CAAC;MACvB;MAEAJ,QAAQ,CAAC;QAAEX,IAAI,EAAE;MAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEN,KAAK,CAACsB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMmB,eAAe,GAAIC,YAAY,IAAK;IACxC1B,QAAQ,CAAC;MAAEX,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEoC;IAAa,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,kBAAkB,GAAIV,MAAM,IAAK;IACrCjB,QAAQ,CAAC;MAAEX,IAAI,EAAE,qBAAqB;MAAEC,OAAO,EAAE2B;IAAO,CAAC,CAAC;EAC5D,CAAC;EAED,oBACEvC,OAAA,CAACO,WAAW,CAAC2C,QAAQ;IACnBC,KAAK,EAAE;MACLjD,YAAY,EAAEO,KAAK,CAACP,YAAY;MAChCC,KAAK,EAAEM,KAAK,CAACN,KAAK;MAClBC,aAAa,EAAEK,KAAK,CAACL,aAAa;MAClCC,OAAO,EAAEI,KAAK,CAACJ,OAAO;MACtBC,KAAK,EAAEG,KAAK,CAACH,KAAK;MAClBiB,eAAe;MACfC,UAAU;MACVK,UAAU;MACVI,eAAe;MACfK,WAAW;MACXK,UAAU;MACVE,eAAe;MACfE,eAAe;MACfE;IACF,CAAE;IAAA7B,QAAA,EAEDA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClC,EAAA,CA7JWF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}