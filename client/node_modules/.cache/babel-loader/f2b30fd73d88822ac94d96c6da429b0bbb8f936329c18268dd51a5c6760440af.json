{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null,\n  loading: false,\n  error: null\n};\n\n// Create context\nexport const AuthContext = /*#__PURE__*/createContext(initialState);\n\n// Reducer function\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_REQUEST':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        user: action.payload\n      };\n    case 'LOGIN_FAIL':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Actions\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'LOGIN_REQUEST'\n      });\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAIL',\n        payload: error.message\n      });\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      dispatch({\n        type: 'LOGIN_REQUEST'\n      });\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAIL',\n        payload: error.message\n      });\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('userInfo');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      loading: state.loading,\n      error: state.error,\n      login,\n      register,\n      logout,\n      clearError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","user","localStorage","getItem","JSON","parse","loading","error","AuthContext","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","login","email","password","response","fetch","method","headers","body","stringify","data","json","ok","Error","message","setItem","register","username","logout","removeItem","clearError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\n\n// Initial state\nconst initialState = {\n  user: localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : null,\n  loading: false,\n  error: null,\n};\n\n// Create context\nexport const AuthContext = createContext(initialState);\n\n// Reducer function\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_REQUEST':\n      return { ...state, loading: true, error: null };\n    case 'LOGIN_SUCCESS':\n      return { ...state, loading: false, user: action.payload };\n    case 'LOGIN_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    case 'LOGOUT':\n      return { ...state, user: null };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Actions\n  const login = async (email, password) => {\n    try {\n      dispatch({ type: 'LOGIN_REQUEST' });\n\n      const response = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAIL',\n        payload: error.message,\n      });\n    }\n  };\n\n  const register = async (username, email, password) => {\n    try {\n      dispatch({ type: 'LOGIN_REQUEST' });\n\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAIL',\n        payload: error.message,\n      });\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('userInfo');\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        loading: state.loading,\n        error: state.error,\n        login,\n        register,\n        logout,\n        clearError,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}