{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useCallback } from 'react';\nimport * as api from '../utils/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null\n};\n\n// Create context\nexport const ChatContext = /*#__PURE__*/createContext(initialState);\n\n// Action types\nconst SET_SELECTED_CHAT = 'SET_SELECTED_CHAT';\nconst SET_CHATS = 'SET_CHATS';\nconst ADD_CHAT = 'ADD_CHAT';\nconst UPDATE_CHAT = 'UPDATE_CHAT';\nconst ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nconst REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\nconst CHAT_LOADING = 'CHAT_LOADING';\nconst CHAT_ERROR = 'CHAT_ERROR';\nconst CHAT_RESET = 'CHAT_RESET';\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case SET_SELECTED_CHAT:\n      return {\n        ...state,\n        selectedChat: action.payload\n      };\n    case SET_CHATS:\n      return {\n        ...state,\n        chats: action.payload\n      };\n    case ADD_CHAT:\n      return {\n        ...state,\n        chats: [action.payload, ...state.chats]\n      };\n    case UPDATE_CHAT:\n      return {\n        ...state,\n        chats: state.chats.map(c => c._id === action.payload._id ? action.payload : c)\n      };\n    case ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications]\n      };\n    case REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.chat._id !== action.payload)\n      };\n    case CHAT_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case CHAT_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case CHAT_RESET:\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Set selected chat\n  const setSelectedChat = useCallback(chat => {\n    dispatch({\n      type: SET_SELECTED_CHAT,\n      payload: chat\n    });\n  }, []);\n\n  // Fetch all chats\n  const fetchChats = useCallback(async token => {\n    try {\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.get('/api/chat', token);\n      dispatch({\n        type: SET_CHATS,\n        payload: data\n      });\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, []);\n\n  // Access or create a chat\n  const accessChat = useCallback(async (userId, token) => {\n    try {\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.post('/api/chat', {\n        userId\n      }, token);\n\n      // If the chat is not already in the list, add it\n      if (!state.chats.find(c => c._id === data._id)) {\n        dispatch({\n          type: ADD_CHAT,\n          payload: data\n        });\n      }\n      setSelectedChat(data);\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, [state.chats, setSelectedChat]);\n\n  // Create a group chat\n  const createGroupChat = useCallback(async (users, name, token) => {\n    try {\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.post('/api/chat/group', {\n        users: JSON.stringify(users),\n        name\n      }, token);\n      dispatch({\n        type: ADD_CHAT,\n        payload: data\n      });\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, []);\n\n  // Rename a group\n  const renameGroup = useCallback(async (chatId, chatName, token) => {\n    try {\n      var _state$selectedChat;\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.put('/api/chat/rename', {\n        chatId,\n        chatName\n      }, token);\n      dispatch({\n        type: UPDATE_CHAT,\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat = state.selectedChat) === null || _state$selectedChat === void 0 ? void 0 : _state$selectedChat._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Add user to group\n  const addToGroup = useCallback(async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat2;\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.put('/api/chat/groupadd', {\n        chatId,\n        userId\n      }, token);\n      dispatch({\n        type: UPDATE_CHAT,\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat2 = state.selectedChat) === null || _state$selectedChat2 === void 0 ? void 0 : _state$selectedChat2._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Remove user from group\n  const removeFromGroup = useCallback(async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat3;\n      dispatch({\n        type: CHAT_LOADING\n      });\n      const data = await api.put('/api/chat/groupremove', {\n        chatId,\n        userId\n      }, token);\n      dispatch({\n        type: UPDATE_CHAT,\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat3 = state.selectedChat) === null || _state$selectedChat3 === void 0 ? void 0 : _state$selectedChat3._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: CHAT_RESET\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: CHAT_ERROR,\n        payload: error.message\n      });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Add notification\n  const addNotification = useCallback(notification => {\n    dispatch({\n      type: ADD_NOTIFICATION,\n      payload: notification\n    });\n  }, []);\n\n  // Remove notification\n  const removeNotification = useCallback(chatId => {\n    dispatch({\n      type: REMOVE_NOTIFICATION,\n      payload: chatId\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      selectedChat: state.selectedChat,\n      chats: state.chats,\n      notifications: state.notifications,\n      loading: state.loading,\n      error: state.error,\n      setSelectedChat,\n      fetchChats,\n      accessChat,\n      createGroupChat,\n      renameGroup,\n      addToGroup,\n      removeFromGroup,\n      addNotification,\n      removeNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"RaL1y58cTTNm0wM0gd+kcAILgoM=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useCallback","api","jsxDEV","_jsxDEV","initialState","selectedChat","chats","notifications","loading","error","ChatContext","SET_SELECTED_CHAT","SET_CHATS","ADD_CHAT","UPDATE_CHAT","ADD_NOTIFICATION","REMOVE_NOTIFICATION","CHAT_LOADING","CHAT_ERROR","CHAT_RESET","chatReducer","state","action","type","payload","map","c","_id","filter","n","chat","ChatProvider","children","_s","dispatch","setSelectedChat","fetchChats","token","data","get","message","accessChat","userId","post","find","createGroupChat","users","name","JSON","stringify","renameGroup","chatId","chatName","_state$selectedChat","put","addToGroup","_state$selectedChat2","removeFromGroup","_state$selectedChat3","addNotification","notification","removeNotification","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useReducer, useCallback } from 'react';\nimport * as api from '../utils/api';\n\n// Initial state\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null,\n};\n\n// Create context\nexport const ChatContext = createContext(initialState);\n\n// Action types\nconst SET_SELECTED_CHAT = 'SET_SELECTED_CHAT';\nconst SET_CHATS = 'SET_CHATS';\nconst ADD_CHAT = 'ADD_CHAT';\nconst UPDATE_CHAT = 'UPDATE_CHAT';\nconst ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nconst REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\nconst CHAT_LOADING = 'CHAT_LOADING';\nconst CHAT_ERROR = 'CHAT_ERROR';\nconst CHAT_RESET = 'CHAT_RESET';\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case SET_SELECTED_CHAT:\n      return { ...state, selectedChat: action.payload };\n    case SET_CHATS:\n      return { ...state, chats: action.payload };\n    case ADD_CHAT:\n      return { ...state, chats: [action.payload, ...state.chats] };\n    case UPDATE_CHAT:\n      return {\n        ...state,\n        chats: state.chats.map((c) =>\n          c._id === action.payload._id ? action.payload : c\n        ),\n      };\n    case ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n      };\n    case REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          (n) => n.chat._id !== action.payload\n        ),\n      };\n    case CHAT_LOADING:\n      return { ...state, loading: true };\n    case CHAT_ERROR:\n      return { ...state, loading: false, error: action.payload };\n    case CHAT_RESET:\n      return { ...state, loading: false, error: null };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Set selected chat\n  const setSelectedChat = useCallback((chat) => {\n    dispatch({ type: SET_SELECTED_CHAT, payload: chat });\n  }, []);\n\n  // Fetch all chats\n  const fetchChats = useCallback(async (token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.get('/api/chat', token);\n\n      dispatch({ type: SET_CHATS, payload: data });\n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, []);\n\n  // Access or create a chat\n  const accessChat = useCallback(async (userId, token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.post('/api/chat', { userId }, token);\n\n      // If the chat is not already in the list, add it\n      if (!state.chats.find((c) => c._id === data._id)) {\n        dispatch({ type: ADD_CHAT, payload: data });\n      }\n\n      setSelectedChat(data);\n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, [state.chats, setSelectedChat]);\n\n  // Create a group chat\n  const createGroupChat = useCallback(async (users, name, token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.post(\n        '/api/chat/group',\n        { users: JSON.stringify(users), name },\n        token\n      );\n\n      dispatch({ type: ADD_CHAT, payload: data });\n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, []);\n\n  // Rename a group\n  const renameGroup = useCallback(async (chatId, chatName, token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.put(\n        '/api/chat/rename',\n        { chatId, chatName },\n        token\n      );\n\n      dispatch({ type: UPDATE_CHAT, payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Add user to group\n  const addToGroup = useCallback(async (chatId, userId, token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.put(\n        '/api/chat/groupadd',\n        { chatId, userId },\n        token\n      );\n\n      dispatch({ type: UPDATE_CHAT, payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Remove user from group\n  const removeFromGroup = useCallback(async (chatId, userId, token) => {\n    try {\n      dispatch({ type: CHAT_LOADING });\n\n      const data = await api.put(\n        '/api/chat/groupremove',\n        { chatId, userId },\n        token\n      );\n\n      dispatch({ type: UPDATE_CHAT, payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: CHAT_RESET });\n      \n      return data;\n    } catch (error) {\n      dispatch({ type: CHAT_ERROR, payload: error.message });\n      throw error;\n    }\n  }, [state.selectedChat, setSelectedChat]);\n\n  // Add notification\n  const addNotification = useCallback((notification) => {\n    dispatch({ type: ADD_NOTIFICATION, payload: notification });\n  }, []);\n\n  // Remove notification\n  const removeNotification = useCallback((chatId) => {\n    dispatch({ type: REMOVE_NOTIFICATION, payload: chatId });\n  }, []);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat: state.selectedChat,\n        chats: state.chats,\n        notifications: state.notifications,\n        loading: state.loading,\n        error: state.error,\n        setSelectedChat,\n        fetchChats,\n        accessChat,\n        createGroupChat,\n        renameGroup,\n        addToGroup,\n        removeFromGroup,\n        addNotification,\n        removeNotification,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}