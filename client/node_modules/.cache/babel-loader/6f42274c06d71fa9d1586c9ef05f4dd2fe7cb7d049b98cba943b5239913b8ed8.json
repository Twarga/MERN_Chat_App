{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Message from '../Message/Message';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport Spinner from '../Spinner/Spinner';\nimport FileUploadModal from '../FileUpload/FileUploadModal';\nimport { useAuth } from '../../hooks/useAuth';\nimport socket from '../../utils/socket';\nimport './ChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  chat\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Fetch messages when chat changes\n  useEffect(() => {\n    if (chat) {\n      fetchMessages();\n      socket.emit('join chat', chat._id);\n    }\n    return () => {\n      // Clean up typing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [chat]);\n\n  // Set up socket listeners\n  useEffect(() => {\n    socket.on('message received', newMessageReceived => {\n      if (!chat ||\n      // if chat is not selected or doesn't match current chat\n      chat._id !== newMessageReceived.chat._id) {\n        // Add notification logic here\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n    return () => {\n      socket.off('message received');\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, chat, messages]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const fetchMessages = async () => {\n    if (!chat) return;\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/messages/${chat._id}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch messages');\n      }\n      setMessages(data);\n      setLoading(false);\n\n      // Join socket room\n      socket.emit('join chat', chat._id);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n\n    // Typing indicator logic\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', chat._id);\n    }\n\n    // Clear timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Stop typing after 3 seconds of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      socket.emit('stop typing', chat._id);\n      setTyping(false);\n    }, 3000);\n  };\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (newMessage.trim() === '') return;\n    socket.emit('stop typing', chat._id);\n    try {\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.token}`\n        },\n        body: JSON.stringify({\n          content: newMessage,\n          chatId: chat._id\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send message');\n      }\n      setNewMessage('');\n      socket.emit('new message', data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  // Send an image message\n  const handleFileUpload = async filePath => {\n    try {\n      // Create message with image URL\n      const imageMessage = `![Image](${filePath})`;\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.token}`\n        },\n        body: JSON.stringify({\n          content: imageMessage,\n          chatId: chat._id\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send image');\n      }\n      socket.emit('new message', data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.error('Error sending image:', error);\n    }\n  };\n\n  // Get chat name for display\n  const getChatName = () => {\n    var _chat$users$find;\n    if (chat.isGroupChat) {\n      return chat.chatName;\n    }\n    return ((_chat$users$find = chat.users.find(u => u._id !== user._id)) === null || _chat$users$find === void 0 ? void 0 : _chat$users$find.username) || \"Chat\";\n  };\n\n  // Get status text (online/offline)\n  const getStatusText = () => {\n    if (chat.isGroupChat) {\n      return `${chat.users.length} members`;\n    }\n    const chatUser = chat.users.find(u => u._id !== user._id);\n    return chatUser !== null && chatUser !== void 0 && chatUser.isOnline ? 'Online' : 'Offline';\n  };\n  if (!chat) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box chat-box-empty\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a chat to start messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [chat.isGroupChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar group-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(UserAvatar, {\n        user: chat.users.find(u => u._id !== user._id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: getChatName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-text\",\n          children: getStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          isSender: message.sender._id === user._id\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-input-container\",\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"upload-btn\",\n        onClick: () => setShowUploadModal(true),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: newMessage,\n        onChange: typingHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-paper-plane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUploadModal, {\n      isOpen: showUploadModal,\n      onClose: () => setShowUploadModal(false),\n      onFileUpload: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"Fzf6BLbZdyRvOjKeGIq1nNl7sN0=\", false, function () {\n  return [useAuth];\n});\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Message","UserAvatar","Spinner","FileUploadModal","useAuth","socket","jsxDEV","_jsxDEV","ChatBox","chat","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","typing","setTyping","isTyping","setIsTyping","showUploadModal","setShowUploadModal","user","messagesEndRef","typingTimeoutRef","fetchMessages","emit","_id","current","clearTimeout","on","newMessageReceived","off","scrollToBottom","_messagesEndRef$curre","scrollIntoView","behavior","response","fetch","method","headers","Authorization","token","data","json","ok","Error","message","error","console","typingHandler","e","target","value","setTimeout","sendMessage","preventDefault","trim","body","JSON","stringify","content","chatId","handleFileUpload","filePath","imageMessage","getChatName","_chat$users$find","isGroupChat","chatName","users","find","u","username","getStatusText","length","chatUser","isOnline","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isSender","sender","ref","onSubmit","type","onClick","placeholder","onChange","isOpen","onClose","onFileUpload","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/components/Chat/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Message from '../Message/Message';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport Spinner from '../Spinner/Spinner';\nimport FileUploadModal from '../FileUpload/FileUploadModal';\nimport { useAuth } from '../../hooks/useAuth';\nimport socket from '../../utils/socket';\nimport './ChatBox.css';\n\nconst ChatBox = ({ chat }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const { user } = useAuth();\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Fetch messages when chat changes\n  useEffect(() => {\n    if (chat) {\n      fetchMessages();\n      socket.emit('join chat', chat._id);\n    }\n    return () => {\n      // Clean up typing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [chat]);\n\n  // Set up socket listeners\n  useEffect(() => {\n    socket.on('message received', (newMessageReceived) => {\n      if (\n        !chat || // if chat is not selected or doesn't match current chat\n        chat._id !== newMessageReceived.chat._id\n      ) {\n        // Add notification logic here\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n\n    return () => {\n      socket.off('message received');\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, chat, messages]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const fetchMessages = async () => {\n    if (!chat) return;\n\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/messages/${chat._id}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch messages');\n      }\n\n      setMessages(data);\n      setLoading(false);\n\n      // Join socket room\n      socket.emit('join chat', chat._id);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    // Typing indicator logic\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', chat._id);\n    }\n\n    // Clear timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Stop typing after 3 seconds of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      socket.emit('stop typing', chat._id);\n      setTyping(false);\n    }, 3000);\n  };\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    \n    if (newMessage.trim() === '') return;\n    \n    socket.emit('stop typing', chat._id);\n    \n    try {\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.token}`,\n        },\n        body: JSON.stringify({\n          content: newMessage,\n          chatId: chat._id,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send message');\n      }\n\n      setNewMessage('');\n      socket.emit('new message', data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  // Send an image message\n  const handleFileUpload = async (filePath) => {\n    try {\n      // Create message with image URL\n      const imageMessage = `![Image](${filePath})`;\n      \n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user.token}`,\n        },\n        body: JSON.stringify({\n          content: imageMessage,\n          chatId: chat._id,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send image');\n      }\n\n      socket.emit('new message', data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.error('Error sending image:', error);\n    }\n  };\n\n  // Get chat name for display\n  const getChatName = () => {\n    if (chat.isGroupChat) {\n      return chat.chatName;\n    }\n    \n    return chat.users.find(u => u._id !== user._id)?.username || \"Chat\";\n  };\n\n  // Get status text (online/offline)\n  const getStatusText = () => {\n    if (chat.isGroupChat) {\n      return `${chat.users.length} members`;\n    }\n    \n    const chatUser = chat.users.find(u => u._id !== user._id);\n    return chatUser?.isOnline ? 'Online' : 'Offline';\n  };\n\n  if (!chat) {\n    return (\n      <div className=\"chat-box chat-box-empty\">\n        <div>\n          <h3>Select a chat to start messaging</h3>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-box\">\n      <div className=\"chat-header\">\n        {chat.isGroupChat ? (\n          <div className=\"avatar group-avatar\">\n            <span>G</span>\n          </div>\n        ) : (\n          <UserAvatar\n            user={chat.users.find(u => u._id !== user._id)}\n          />\n        )}\n        \n        <div className=\"chat-info\">\n          <h3>{getChatName()}</h3>\n          <p className=\"status-text\">{getStatusText()}</p>\n        </div>\n      </div>\n\n      <div className=\"messages-container\">\n        {loading ? (\n          <Spinner />\n        ) : (\n          <div className=\"messages\">\n            {messages.map((message) => (\n              <Message\n                key={message._id}\n                message={message}\n                isSender={message.sender._id === user._id}\n              />\n            ))}\n            <div ref={messagesEndRef} />\n            \n            {isTyping && (\n              <div className=\"typing-indicator\">\n                <div className=\"dot\"></div>\n                <div className=\"dot\"></div>\n                <div className=\"dot\"></div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      <form className=\"message-input-container\" onSubmit={sendMessage}>\n        <button \n          type=\"button\" \n          className=\"upload-btn\"\n          onClick={() => setShowUploadModal(true)}\n        >\n          <i className=\"fas fa-image\"></i>\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Type a message...\"\n          value={newMessage}\n          onChange={typingHandler}\n        />\n        <button type=\"submit\">\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n      </form>\n      \n      <FileUploadModal \n        isOpen={showUploadModal}\n        onClose={() => setShowUploadModal(false)}\n        onFileUpload={handleFileUpload}\n      />\n    </div>\n  );\n};\n\nexport default ChatBox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}