{"ast":null,"code":"var _jsxFileName = \"/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null\n};\n\n// Create context\nexport const ChatContext = /*#__PURE__*/createContext(initialState);\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SELECTED_CHAT':\n      return {\n        ...state,\n        selectedChat: action.payload\n      };\n    case 'SET_CHATS':\n      return {\n        ...state,\n        chats: action.payload\n      };\n    case 'ADD_CHAT':\n      return {\n        ...state,\n        chats: [action.payload, ...state.chats]\n      };\n    case 'UPDATE_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map(c => c._id === action.payload._id ? action.payload : c)\n      };\n    case 'SET_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: action.payload\n      };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications]\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.chat._id !== action.payload)\n      };\n    case 'CHAT_LOADING':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'CHAT_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'CHAT_RESET':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Actions\n  const setSelectedChat = chat => {\n    dispatch({\n      type: 'SET_SELECTED_CHAT',\n      payload: chat\n    });\n  };\n  const fetchChats = async token => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      console.log(\"Fetching chats with token:\", token ? \"valid token\" : \"no token\");\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      console.log(\"Fetch chats response:\", data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch chats');\n      }\n      dispatch({\n        type: 'SET_CHATS',\n        payload: data\n      });\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const accessChat = async (userId, token) => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      console.log(\"Accessing chat with user:\", userId);\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      const data = await response.json();\n      console.log(\"Chat access response:\", data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to access chat');\n      }\n\n      // If the chat is not already in the list, add it\n      if (!state.chats.find(c => c._id === data._id)) {\n        dispatch({\n          type: 'ADD_CHAT',\n          payload: data\n        });\n      }\n      setSelectedChat(data);\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      console.error(\"Chat access error:\", error);\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const createGroupChat = async (users, name, token) => {\n    try {\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const response = await fetch('http://localhost:5000/api/chat/group', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          users: JSON.stringify(users),\n          name\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to create group chat');\n      }\n      dispatch({\n        type: 'ADD_CHAT',\n        payload: data\n      });\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const renameGroup = async (chatId, chatName, token) => {\n    try {\n      var _state$selectedChat;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const response = await fetch('http://localhost:5000/api/chat/rename', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          chatId,\n          chatName\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to rename group');\n      }\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat = state.selectedChat) === null || _state$selectedChat === void 0 ? void 0 : _state$selectedChat._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const addToGroup = async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat2;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const response = await fetch('http://localhost:5000/api/chat/groupadd', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          chatId,\n          userId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to add to group');\n      }\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat2 = state.selectedChat) === null || _state$selectedChat2 === void 0 ? void 0 : _state$selectedChat2._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const removeFromGroup = async (chatId, userId, token) => {\n    try {\n      var _state$selectedChat3;\n      dispatch({\n        type: 'CHAT_LOADING'\n      });\n      const response = await fetch('http://localhost:5000/api/chat/groupremove', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          chatId,\n          userId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to remove from group');\n      }\n      dispatch({\n        type: 'UPDATE_CHAT',\n        payload: data\n      });\n\n      // If this is the selected chat, update it\n      if (((_state$selectedChat3 = state.selectedChat) === null || _state$selectedChat3 === void 0 ? void 0 : _state$selectedChat3._id) === data._id) {\n        setSelectedChat(data);\n      }\n      dispatch({\n        type: 'CHAT_RESET'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CHAT_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: notification\n    });\n  };\n  const removeNotification = chatId => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      payload: chatId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      selectedChat: state.selectedChat,\n      chats: state.chats,\n      notifications: state.notifications,\n      loading: state.loading,\n      error: state.error,\n      setSelectedChat,\n      fetchChats,\n      accessChat,\n      createGroupChat,\n      renameGroup,\n      addToGroup,\n      removeFromGroup,\n      addNotification,\n      removeNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","initialState","selectedChat","chats","notifications","loading","error","ChatContext","chatReducer","state","action","type","payload","map","c","_id","filter","n","chat","ChatProvider","children","_s","dispatch","setSelectedChat","fetchChats","token","console","log","response","fetch","method","headers","Authorization","data","json","ok","Error","message","accessChat","userId","body","JSON","stringify","find","createGroupChat","users","name","renameGroup","chatId","chatName","_state$selectedChat","addToGroup","_state$selectedChat2","removeFromGroup","_state$selectedChat3","addNotification","notification","removeNotification","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n// Initial state\nconst initialState = {\n  selectedChat: null,\n  chats: [],\n  notifications: [],\n  loading: false,\n  error: null,\n};\n\n// Create context\nexport const ChatContext = createContext(initialState);\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SELECTED_CHAT':\n      return { ...state, selectedChat: action.payload };\n    case 'SET_CHATS':\n      return { ...state, chats: action.payload };\n    case 'ADD_CHAT':\n      return { ...state, chats: [action.payload, ...state.chats] };\n    case 'UPDATE_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map((c) =>\n          c._id === action.payload._id ? action.payload : c\n        ),\n      };\n    case 'SET_NOTIFICATIONS':\n      return { ...state, notifications: action.payload };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          (n) => n.chat._id !== action.payload\n        ),\n      };\n    case 'CHAT_LOADING':\n      return { ...state, loading: true };\n    case 'CHAT_ERROR':\n      return { ...state, loading: false, error: action.payload };\n    case 'CHAT_RESET':\n      return { ...state, loading: false, error: null };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Actions\n  const setSelectedChat = (chat) => {\n    dispatch({ type: 'SET_SELECTED_CHAT', payload: chat });\n  };\n\n  const fetchChats = async (token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      console.log(\"Fetching chats with token:\", token ? \"valid token\" : \"no token\");\n\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = await response.json();\n      console.log(\"Fetch chats response:\", data);\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch chats');\n      }\n\n      dispatch({ type: 'SET_CHATS', payload: data });\n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const accessChat = async (userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n      console.log(\"Accessing chat with user:\", userId);\n\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ userId }),\n      });\n\n      const data = await response.json();\n      console.log(\"Chat access response:\", data);\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to access chat');\n      }\n\n      // If the chat is not already in the list, add it\n      if (!state.chats.find((c) => c._id === data._id)) {\n        dispatch({ type: 'ADD_CHAT', payload: data });\n      }\n\n      setSelectedChat(data);\n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      console.error(\"Chat access error:\", error);\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const createGroupChat = async (users, name, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n\n      const response = await fetch('http://localhost:5000/api/chat/group', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ users: JSON.stringify(users), name }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to create group chat');\n      }\n\n      dispatch({ type: 'ADD_CHAT', payload: data });\n      dispatch({ type: 'CHAT_RESET' });\n      return data;\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n      throw error;\n    }\n  };\n\n  const renameGroup = async (chatId, chatName, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n\n      const response = await fetch('http://localhost:5000/api/chat/rename', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ chatId, chatName }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to rename group');\n      }\n\n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const addToGroup = async (chatId, userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n\n      const response = await fetch('http://localhost:5000/api/chat/groupadd', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ chatId, userId }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to add to group');\n      }\n\n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const removeFromGroup = async (chatId, userId, token) => {\n    try {\n      dispatch({ type: 'CHAT_LOADING' });\n\n      const response = await fetch('http://localhost:5000/api/chat/groupremove', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ chatId, userId }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to remove from group');\n      }\n\n      dispatch({ type: 'UPDATE_CHAT', payload: data });\n      \n      // If this is the selected chat, update it\n      if (state.selectedChat?._id === data._id) {\n        setSelectedChat(data);\n      }\n      \n      dispatch({ type: 'CHAT_RESET' });\n    } catch (error) {\n      dispatch({ type: 'CHAT_ERROR', payload: error.message });\n    }\n  };\n\n  const addNotification = (notification) => {\n    dispatch({ type: 'ADD_NOTIFICATION', payload: notification });\n  };\n\n  const removeNotification = (chatId) => {\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: chatId });\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat: state.selectedChat,\n        chats: state.chats,\n        notifications: state.notifications,\n        loading: state.loading,\n        error: state.error,\n        setSelectedChat,\n        fetchChats,\n        accessChat,\n        createGroupChat,\n        renameGroup,\n        addToGroup,\n        removeFromGroup,\n        addNotification,\n        removeNotification,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}