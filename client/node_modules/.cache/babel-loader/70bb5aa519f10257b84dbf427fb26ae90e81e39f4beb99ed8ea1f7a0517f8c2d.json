{"ast":null,"code":"/**\n * API utility for making fetch requests with proper error handling\n */\n\n// Base URL for API requests - explicitly set the protocol\nconst BASE_URL = 'http://localhost:5000';\n\n/**\n * Makes a fetch request with proper error handling and authentication\n */\nexport const fetchApi = async (endpoint, options = {}, token = null) => {\n  try {\n    // Prepare full URL\n    const url = `${BASE_URL}${endpoint}`;\n    console.log(`Fetching: ${url}`);\n\n    // Prepare headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n\n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Prepare fetch options\n    const fetchOptions = {\n      ...options,\n      headers,\n      mode: 'cors' // Ensure CORS is enabled\n    };\n\n    // Make request\n    const response = await fetch(url, fetchOptions);\n\n    // Handle non-JSON responses\n    const contentType = response.headers.get('content-type');\n    let data;\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      data = await response.text();\n    }\n\n    // Check if response is ok\n    if (!response.ok) {\n      throw new Error(typeof data === 'object' && data.message ? data.message : `Request failed with status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error.message);\n    throw error;\n  }\n};\n\n/**\n * Get data from API\n */\nexport const get = (endpoint, token) => {\n  return fetchApi(endpoint, {\n    method: 'GET'\n  }, token);\n};\n\n/**\n * Post data to API\n */\nexport const post = (endpoint, data, token) => {\n  return fetchApi(endpoint, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  }, token);\n};\n\n/**\n * Update data via API\n */\nexport const put = (endpoint, data, token) => {\n  return fetchApi(endpoint, {\n    method: 'PUT',\n    body: JSON.stringify(data)\n  }, token);\n};\n\n/**\n * Delete data via API\n */\nexport const del = (endpoint, token) => {\n  return fetchApi(endpoint, {\n    method: 'DELETE'\n  }, token);\n};","map":{"version":3,"names":["BASE_URL","fetchApi","endpoint","options","token","url","console","log","headers","fetchOptions","mode","response","fetch","contentType","get","data","includes","json","text","ok","Error","message","status","error","method","post","body","JSON","stringify","put","del"],"sources":["/home/twarga/Documents/MERN/mern-chat-app/client/src/utils/api.js"],"sourcesContent":["/**\n * API utility for making fetch requests with proper error handling\n */\n\n// Base URL for API requests - explicitly set the protocol\nconst BASE_URL = 'http://localhost:5000';\n\n/**\n * Makes a fetch request with proper error handling and authentication\n */\nexport const fetchApi = async (endpoint, options = {}, token = null) => {\n  try {\n    // Prepare full URL\n    const url = `${BASE_URL}${endpoint}`;\n    console.log(`Fetching: ${url}`);\n    \n    // Prepare headers\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n    \n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Prepare fetch options\n    const fetchOptions = {\n      ...options,\n      headers,\n      mode: 'cors', // Ensure CORS is enabled\n    };\n\n    // Make request\n    const response = await fetch(url, fetchOptions);\n    \n    // Handle non-JSON responses\n    const contentType = response.headers.get('content-type');\n    let data;\n    \n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      data = await response.text();\n    }\n    \n    // Check if response is ok\n    if (!response.ok) {\n      throw new Error(\n        typeof data === 'object' && data.message \n          ? data.message \n          : `Request failed with status: ${response.status}`\n      );\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error.message);\n    throw error;\n  }\n};\n\n/**\n * Get data from API\n */\nexport const get = (endpoint, token) => {\n  return fetchApi(endpoint, { method: 'GET' }, token);\n};\n\n/**\n * Post data to API\n */\nexport const post = (endpoint, data, token) => {\n  return fetchApi(\n    endpoint,\n    {\n      method: 'POST',\n      body: JSON.stringify(data),\n    },\n    token\n  );\n};\n\n/**\n * Update data via API\n */\nexport const put = (endpoint, data, token) => {\n  return fetchApi(\n    endpoint,\n    {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    },\n    token\n  );\n};\n\n/**\n * Delete data via API\n */\nexport const del = (endpoint, token) => {\n  return fetchApi(endpoint, { method: 'DELETE' }, token);\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,GAAG,IAAI,KAAK;EACtE,IAAI;IACF;IACA,MAAMC,GAAG,GAAG,GAAGL,QAAQ,GAAGE,QAAQ,EAAE;IACpCI,OAAO,CAACC,GAAG,CAAC,aAAaF,GAAG,EAAE,CAAC;;IAE/B;IACA,MAAMG,OAAO,GAAG;MACd,cAAc,EAAE,kBAAkB;MAClC,GAAGL,OAAO,CAACK;IACb,CAAC;;IAED;IACA,IAAIJ,KAAK,EAAE;MACTI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;IAC9C;;IAEA;IACA,MAAMK,YAAY,GAAG;MACnB,GAAGN,OAAO;MACVK,OAAO;MACPE,IAAI,EAAE,MAAM,CAAE;IAChB,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEI,YAAY,CAAC;;IAE/C;IACA,MAAMI,WAAW,GAAGF,QAAQ,CAACH,OAAO,CAACM,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIC,IAAI;IAER,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DD,IAAI,GAAG,MAAMJ,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACLF,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B;;IAEA;IACA,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CACb,OAAOL,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACM,OAAO,GACpCN,IAAI,CAACM,OAAO,GACZ,+BAA+BV,QAAQ,CAACW,MAAM,EACpD,CAAC;IACH;IAEA,OAAOP,IAAI;EACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,cAAcrB,QAAQ,IAAI,EAAEqB,KAAK,CAACF,OAAO,CAAC;IACxD,MAAME,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMT,GAAG,GAAGA,CAACZ,QAAQ,EAAEE,KAAK,KAAK;EACtC,OAAOH,QAAQ,CAACC,QAAQ,EAAE;IAAEsB,MAAM,EAAE;EAAM,CAAC,EAAEpB,KAAK,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMqB,IAAI,GAAGA,CAACvB,QAAQ,EAAEa,IAAI,EAAEX,KAAK,KAAK;EAC7C,OAAOH,QAAQ,CACbC,QAAQ,EACR;IACEsB,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;EAC3B,CAAC,EACDX,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMyB,GAAG,GAAGA,CAAC3B,QAAQ,EAAEa,IAAI,EAAEX,KAAK,KAAK;EAC5C,OAAOH,QAAQ,CACbC,QAAQ,EACR;IACEsB,MAAM,EAAE,KAAK;IACbE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;EAC3B,CAAC,EACDX,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM0B,GAAG,GAAGA,CAAC5B,QAAQ,EAAEE,KAAK,KAAK;EACtC,OAAOH,QAAQ,CAACC,QAAQ,EAAE;IAAEsB,MAAM,EAAE;EAAS,CAAC,EAAEpB,KAAK,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}